{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Octopus",
  "patterns": [
    {
      "include": "#includes"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#blocks"
    },
    {
      "include": "#scalar-assignments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#mathematical-expressions"
    },
    {
      "include": "#predefined-constants"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "includes": {
      "patterns": [
        {
          "name": "keyword.control.import.octopus",
          "match": "^\\s*(include)\\s+([\\w./-]+)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.control.import.octopus"
            },
            "2": {
              "name": "string.unquoted.filename.octopus"
            }
          },
          "comment": "Include statements"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.octopus",
          "match": "#.*$",
          "comment": "Line comments starting with #"
        }
      ]
    },
    "scalar-assignments": {
      "patterns": [
        {
          "name": "meta.assignment.octopus",
          "match": "^\\s*([A-Za-z][A-Za-z0-9_]*)\\s*(=)\\s*(.*)$",
          "captures": {
            "1": {
              "name": "variable.other.octopus"
            },
            "2": {
              "name": "keyword.operator.assignment.octopus"
            },
            "3": {
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#strings"
                },
                {
                  "include": "#numbers"
                },
                {
                  "include": "#mathematical-expressions"
                },
                {
                  "include": "#predefined-constants"
                },
                {
                  "include": "#boolean-values"
                }
              ]
            }
          },
          "comment": "Scalar variable assignments"
        }
      ]
    },
    "blocks": {
      "patterns": [
        {
          "name": "meta.block.octopus",
          "begin": "^\\s*(%)(\\w+)\\s*$",
          "end": "^\\s*%\\s*$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.block.begin.octopus"
            },
            "2": {
              "name": "entity.name.tag.block.octopus"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.octopus"
            }
          },
          "patterns": [
            {
              "include": "#block-content"
            }
          ],
          "comment": "Block definitions with % prefix and % suffix"
        }
      ]
    },
    "block-content": {
      "patterns": [
        {
          "name": "punctuation.separator.pipe.octopus",
          "match": "\\|",
          "comment": "Block column separator"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#mathematical-expressions"
        },
        {
          "include": "#predefined-constants"
        },
        {
          "name": "variable.other.block-content.octopus",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
          "comment": "Block content variables and identifiers"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.octopus",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.octopus",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.octopus",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.octopus",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.complex.octopus",
          "match": "\\{\\s*[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\s*,\\s*[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\s*\\}",
          "comment": "Complex numbers {real, imag}"
        },
        {
          "name": "constant.numeric.scientific.octopus",
          "match": "\\b[+-]?\\d+(?:\\.\\d+)?[eE][+-]?\\d+\\b",
          "comment": "Scientific notation numbers"
        },
        {
          "name": "constant.numeric.decimal.octopus",
          "match": "\\b[+-]?\\d+\\.\\d+\\b",
          "comment": "Decimal numbers"
        },
        {
          "name": "constant.numeric.integer.octopus",
          "match": "\\b[+-]?\\d+\\b",
          "comment": "Integer numbers"
        }
      ]
    },
    "mathematical-expressions": {
      "patterns": [
        {
          "name": "support.function.math.octopus",
          "match": "\\b(sqrt|exp|log|ln|log10|logb|logabs|arg|abs|abs2|conjg|inv|sin|cos|tan|cot|sec|csc|asin|acos|atan|acot|asec|acsc|atan2|sinh|cosh|tanh|coth|sech|csch|asinh|acosh|atanh|acoth|asech|acsch|min|max|step|erf|realpart|imagpart|floor|ceiling)(?=\\s*\\()",
          "comment": "Mathematical functions"
        }
      ]
    },
    "predefined-constants": {
      "patterns": [
        {
          "name": "constant.language.octopus",
          "match": "\\b(pi|e|i|angstrom|pm|picometer|nm|nanometer|ry|rydberg|eV|electronvolt|invcm|kelvin|kjoule_mol|kcal_mol|as|attosecond|fs|femtosecond|ps|picosecond|c|x|y|z|r|w|t)\\b",
          "comment": "Predefined constants and reserved variables"
        }
      ]
    },
    "boolean-values": {
      "patterns": [
        {
          "name": "constant.language.boolean.octopus",
          "match": "\\b(yes|no|true|false)\\b",
          "comment": "Boolean values"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.octopus",
          "match": "[+\\-*/^]",
          "comment": "Arithmetic operators"
        },
        {
          "name": "keyword.operator.comparison.octopus",
          "match": "(<=|>=|<|>|==)",
          "comment": "Comparison operators"
        },
        {
          "name": "keyword.operator.logical.octopus",
          "match": "(&&|\\|\\||!)",
          "comment": "Logical operators"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.parameter.octopus",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b",
          "comment": "Octopus variables (validated dynamically on hover)"
        }
      ]
    }
  },
  "scopeName": "source.octopus"
}
